[pylithapp]
# ----------------------------------------------------------------------
# PROBLEM DESCRIPTION
# ----------------------------------------------------------------------

# Dyke Opening Forward Model
# see README for more information

# ----------------------------------------------------------------------
# problem
# ----------------------------------------------------------------------
[pylithapp.problem.formulation.time_step]
# Define the total time for the simulation and the default time step size.
total_time = 0.0*s 
# Define an appropriat time step for simulations. Important for
# nondimensionalization of velocities and slip rates.
dt = 1.0*year


# ----------------------------------------------------------------------
# faults
# ----------------------------------------------------------------------
[pylithapp.problem]
interfaces = [fault]
# Set the type of fault interface condition.
# NOTE: need pylithapp.problem (not problem.timedependent) for step01.greensfns to overwrite settings
[pylithapp.problem.interfaces]
fault = pylith.faults.FaultCohesiveKin
# Set the parameters for the fault interface condition.
[pylithapp.problem.interfaces.fault]
# The label corresponds to the name of the nodeset in CUBIT.
label = fault
# default up_dir, but being explict (+z=up)
#up_dir = [0,0,1] 
# Arbitrary for sill-opening, but can't use [0,0,1] since 'colinear w/ fault normal dir'
up_dir = [0,1,0]
# We must define the quadrature information for fault cells.
# The fault cells are 2D (surface).
quadrature.cell = pylith.feassemble.FIATLagrange
quadrature.cell.dimension = 2

# The slip time and final slip are defined in spatial databases.
[pylithapp.problem.interfaces.fault.eq_srcs.rupture.slip_function]
slip.label = eqsim
slip.iohandler.filename = spatialdb/point_sill.spatialdb
slip.query_type = nearest

# Slip time is uniform, so use UniformDB for convenience
slip_time = spatialdata.spatialdb.UniformDB
slip_time.label = Slip time
slip_time.values = [slip-time]
slip_time.data = [0.0*year]


# ----------------------------------------------------------------------
# Material propertires
# ----------------------------------------------------------------------
[pylithapp.timedependent]

[pylithapp.timedependent.materials.elastic]
# Test some material extremes (for poission's ratio)
# Water (rho=1000.0kg/m^3, Vp=1482m/s, Vs=0)
# Cork (Young’s Modulus: 18.6 MPa, Poisson Ratio: 0.0, density=180kg/m^3)
# Rubber (Young’s Modulus: 15.4 MPa, Poisson Ratio: 0.5, density=1200kg/m^3)
# NOTE: should probably use a more legit reference...
#db_properties.iohandler.filename = spatialdb/mat_elastic_water.spatialdb #crashes pylith
db_properties.iohandler.filename = spatialdb/mat_elastic_cork.spatialdb

[pylithapp.timedependent.materials.viscoelastic]
#db_properties.iohandler.filename = spatialdb/mat_elastic_water.spatialdb #crashes pylith
db_properties.iohandler.filename = spatialdb/mat_elastic_cork.spatialdb


# ----------------------------------------------------------------------
# output
# ----------------------------------------------------------------------
# Minimal output by default (Ground Surface, Fault Surface, Select Points)
# To add additional output run command line with full_output.cfg at end
[pylithapp.problem.formulation]
output = [subdomain, points]
output.subdomain = pylith.meshio.OutputSolnSubset
output.points = pylith.meshio.OutputSolnPoints

# Ground Surface
[pylithapp.problem.formulation.output.subdomain]
vertex_data_fields = [displacement]
label = face_zpos
writer = pylith.meshio.DataWriterHDF5
writer.filename = output/step01/surface-forward.h5

# Fault Surface
[pylithapp.problem.interfaces.fault.output]
# suppress faul_info output by default (see full_output.cfg to enable):
vertex_info_fields = []
vertex_data_fields = [slip, traction_change]
writer = pylith.meshio.DataWriterHDF5
writer.filename = output/step01/fault-forward.h5


# Points all over surface
# - 
# NOTE: Points file from extract_points.py corresponds to nodes of mesh
[pylithapp.problem.formulation.output.points]
vertex_data_fields = [displacement]
##reader.filename = mesh/lazufre_hex8_10km_points.txt
##reader.filename = mesh/lazufre_hex8_5km_points.txt
##reader.filename = mesh/lazufre_hex8_4km_points.txt
##reader.filename = mesh/lazufre_hex8_2.5km_points.txt 
reader.filename = mesh/lazufre_hex8_2km_points.txt 
##reader.filename = mesh/lazufre_hex8_1km_points.txt
coordsys.space_dim = 3 
coordsys.units = m
writer = pylith.meshio.DataWriterHDF5
writer.filename = output/step01/points-forward.h5

# Profile Line Points (for convenience when plotting)
# NOTE: only one 'points' output allowed per run (this will overwrite points-forward)
#[pylithapp.problem.formulation.output.points]
#vertex_data_fields = [displacement]
##reader.filename = profile_points.txt
#reader.filename = profile_points_refined.txt
#coordsys.space_dim = 3 
#coordsys.units = km
#writer = pylith.meshio.DataWriterHDF5
#writer.filename = output/step01/points-profile.h5

# ----------------------------------------------------------------------
# Supress Material Output by default
# ----------------------------------------------------------------------
# Suppress Material Output (uncomment cell_ lists to output)
[pylithapp.problem.materials.elastic.output]
cell_info_fields = []
cell_data_fields = []
writer = pylith.meshio.DataWriterHDF5
writer.filename = output/step01/mat_elastic.h5

[pylithapp.problem.materials.viscoelastic.output]
cell_info_fields = []
cell_data_fields = []
writer = pylith.meshio.DataWriterHDF5
writer.filename = output/step01/mat_viscoelastic.h5

# End of file
